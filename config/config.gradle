project.ext {

	build_params = [
			compile_version: 28,
			min_version    : 21,
			target_version : 28
	]

	key_config = [
			debug_location   : 'debug.key.location',
			debug_pwd        : 'debug.key.password',
			debug_alias      : 'debug.key.alias',
			debug_alias_pwd  : 'debug.key.alias.password',

			release_location : 'release.key.location',
			release_pwd      : 'release.key.password',
			release_alias    : 'release.key.alias',
			release_alias_pwd: 'release.key.alias.password',

			app_version      : 'app.version',
			app_version_name : 'app.version.name'
	]

	methods = [
			getEnv                 : {
				methods.getProperties("config.properties", false)
			},

			getPasswords           : {
				methods.getProperties("passwords.properties", true)
			},

			getAttribute           : { Properties props, String key ->
				String attribute = props.get(key)
				methods.checkAttribute(attribute)
				attribute
			},

			checkAttribute         : { String attribute ->
				if (attribute == null || attribute.size() < 1)
					throw new GradleException("Missing Attribute")
			},

			getProperties          : { String filename, Boolean sensitive ->
				Properties props = new Properties()
				props.load(
						new FileInputStream(
								"${rootDir}${if (!sensitive) "/config/" else "/_SENSITIVE_HIDE_FROM_GIT_/"}${filename}"))
				props
			},

			getStringifiedAttribute: { Properties props, String key ->
				String attribute = props.get(key)
				methods.checkAttribute(attribute)
				methods.stringify(attribute)
			},

			stringify              : { String string ->
				return "\"" + string + "\""
			}
	]

	app = [
			version: {
				def props = project.ext.methods.getEnv()
				methods.getAttribute(props, "${key_config.app_version}") as Integer
			},

			versionName: {
				def props = project.ext.methods.getEnv()
				"${methods.getAttribute(props, "${key_config.app_version_name}")}"
			}
	]
}


android {
	compileSdkVersion build_params.compile_version

	defaultConfig {
		versionCode app.version()
		versionName app.versionName()

		minSdkVersion build_params.min_version
		targetSdkVersion build_params.target_version
	}

	signingConfigs {
		def props = methods.getPasswords()

		debug {
			def loc = methods.getAttribute(props, "${key_config.debug_location}")
			def pwd = methods.getAttribute(props, "${key_config.debug_pwd}")
			def alias = methods.getAttribute(props, "${key_config.debug_alias}")
			def aliasPwd = methods.getAttribute(props, "${key_config.debug_alias_pwd}")

			storeFile file(loc)
			storePassword pwd
			keyAlias alias
			keyPassword aliasPwd
		}
		release {
			def loc = methods.getAttribute(props, "${key_config.release_location}")
			def pwd = methods.getAttribute(props, "${key_config.release_pwd}")
			def alias = methods.getAttribute(props, "${key_config.release_alias}")
			def aliasPwd = methods.getAttribute(props, "${key_config.release_alias_pwd}")

			storeFile file(loc)
			storePassword pwd
			keyAlias alias
			keyPassword aliasPwd
		}
	}

	buildTypes {
		debug {
			debuggable true
			signingConfig signingConfigs.debug
		}
		release {
			debuggable false
			useProguard true
			minifyEnabled true

			signingConfig signingConfigs.release
			proguardFiles getDefaultProguardFile('proguard-android.txt'),
					"$project.rootDir/config/proguard-rules.pro"
		}
	}

	dexOptions {
		preDexLibraries true
		dexInProcess true
	}

	compileOptions {
		sourceCompatibility java_version
		targetCompatibility java_version
	}

	lintOptions {
		abortOnError false

		/*
		 * Disables deep linking warnings.
		 * If your app is indexable remove this and add deep links
		 * to the activities you want to be crawlable
		 */
		disable 'GoogleAppIndexingWarning'

		/*
		 * lint checks for java/kotlin interoperability
		 */
		check 'Interoperability'
	}

}